// =======================================================
// CONFIGURAÇÃO INICIAL
// =======================================================
console.log("Script iniciado.");
const canvas = document.getElementById('game-canvas');
const ctx = canvas.getContext('2d');
const scoreElement = document.getElementById('score');
const messageElement = document.getElementById('message');

const playerSpriteSheet = new Image(); 
const backgroundImage = new Image();

const GAME_WIDTH = canvas.width;
const GAME_HEIGHT = canvas.height;

// Propriedades da Coraline
const PLAYER_SPRITE_WIDTH = 32;
const PLAYER_SPRITE_HEIGHT = 48;
const PLAYER_Y_INITIAL = GAME_HEIGHT - PLAYER_SPRITE_HEIGHT - 10;
let player = {
    x: 50,
    y: PLAYER_Y_INITIAL,
    width: PLAYER_SPRITE_WIDTH,
    height: PLAYER_SPRITE_HEIGHT,
    velocityY: 0,
    isJumping: false,
    frameX: 0,
    frameY: 2,
};

// Propriedades dos obstáculos
let dangers = [];
const HAND_COLOR = '#556b2f';
const BAT_COLOR = '#8b0000';

// Variáveis do jogo
let score = 0;
let gameSpeed = 6;
let dangerSpawnTimer = 0;
let isGameOver = true; 
let gameFrame = 0;
const staggerFrames = 8;

// Variáveis para o fundo em movimento
let backgroundX = 0;
const backgroundSpeedModifier = 0.5;

// =======================================================
// FUNÇÕES DE DESENHO
// =======================================================
function drawBackground() {
    ctx.drawImage(backgroundImage, backgroundX, 0, GAME_WIDTH, GAME_HEIGHT);
    ctx.drawImage(backgroundImage, backgroundX + GAME_WIDTH, 0, GAME_WIDTH, GAME_HEIGHT);
}

function drawPlayer() {
    // Verifica se a imagem está carregada E tem um tamanho válido
    if (playerSpriteSheet.complete && playerSpriteSheet.naturalWidth > 0) {
        ctx.imageSmoothingEnabled = false; 
        ctx.drawImage(
            playerSpriteSheet,
            player.frameX * PLAYER_SPRITE_WIDTH, 
            player.frameY * PLAYER_SPRITE_HEIGHT,
            PLAYER_SPRITE_WIDTH, PLAYER_SPRITE_HEIGHT, 
            player.x, player.y, 
            player.width, player.height
        );
    } else {
        // --- TESTE DE DIAGNÓSTICO ---
        // Se a imagem falhar, desenha um quadrado ROSA BRILHANTE
        console.warn("TESTE: Desenhando quadrado de fallback ROSA. A imagem 'coraline_sprite.png' FALHOU ao carregar ou é inválida.");
        ctx.fillStyle = '#FF00FF'; // ROSA BRILHANTE
        ctx.fillRect(player.x, player.y, player.width, player.height);
    }
}

function drawDangers() {
    dangers.forEach(danger => {
        ctx.fillStyle = danger.color;
        ctx.fillRect(danger.x, danger.y, danger.width, danger.height);
    });
}

// =======================================================
// FUNÇÕES DE ATUALIZAÇÃO (LÓGICA)
// =======================================================
function updateBackground() {
    const currentBackgroundSpeed = gameSpeed * backgroundSpeedModifier;
    backgroundX -= currentBackgroundSpeed;
    if (backgroundX < -GAME_WIDTH) {
        backgroundX = 0;
    }
}

function updatePlayer() {
    if (gameFrame % staggerFrames === 0) {
        if (player.frameX < 3) {
            player.frameX++;
        } else {
            player.frameX = 0;
        }
    }

    if (player.isJumping) {
        player.velocityY += 0.8; 
        player.y += player.velocityY;
        player.frameY = 3;
    }

    if (player.y > PLAYER_Y_INITIAL) {
        player.y = PLAYER_Y_INITIAL;
        player.velocityY = 0;
        player.isJumping = false;
        player.frameY = 2;
    }
}

function updateDangers() {
    dangerSpawnTimer++;
    if (dangerSpawnTimer > 80 - gameSpeed * 2 + Math.random() * 50) {
        if (Math.random() < 0.25 && score > 50) { 
            dangers.push({
                x: GAME_WIDTH,
                y: PLAYER_Y_INITIAL - 30, 
                width: 40,
                height: 25,
                color: BAT_COLOR,
                type: 'bat'
            });
        } else {
            dangers.push({
                x: GAME_WIDTH,
                y: PLAYER_Y_INITIAL + 10, 
                width: 25,
                height: 40,
                color: HAND_COLOR,
                type: 'hand'
            });
        }
        dangerSpawnTimer = 0;
    }

    dangers.forEach(danger => {
        danger.x -= gameSpeed;
    });

    dangers = dangers.filter(danger => danger.x + danger.width > 0);
}

function checkCollision() {
    dangers.forEach(danger => {
        if (player.x < danger.x + danger.width &&
            player.x + player.width > danger.x &&
            player.y < danger.y + danger.height &&
            player.y + player.height > danger.y) {
            gameOver();
        }
    });
}

function updateScore() {
    score++;
    scoreElement.textContent = Math.floor(score / 10);

    if (score % 500 === 0) {
        gameSpeed += 0.3;
    }
}

// =======================================================
// CONTROLE DO JOGO
// =======================================================
function resetGame() {
    console.log("Função resetGame() FOI CHAMADA.");
    player.y = PLAYER_Y_INITIAL;
    player.velocityY = 0;
    player.isJumping = false;
    dangers = [];
    score = 0;
    scoreElement.textContent = '0';
    gameSpeed = 6;
    isGameOver = false; 
    messageElement.style.display = 'none';
    gameLoop();
}

function gameOver() {
    isGameOver = true; 
    messageElement.textContent = `A Bela Dama te pegou... Pressione Espaço.`;
    messageElement.style.display = 'block';
    console.log("Game Over. 'isGameOver' definido como 'true'.");
}

function gameLoop() {
    if (isGameOver) {
        return; 
    }

    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); 
    
    // Ordem de desenho correta
    drawBackground();
    drawPlayer();
    drawDangers();   

    // Atualiza a lógica
    updateBackground();
    updatePlayer();
    updateDangers();
    checkCollision();
    updateScore();

    gameFrame++;
    requestAnimationFrame(gameLoop);
}

// =======================================================
// CONTROLES DO USUÁRIO E INÍCIO
// =======================================================
window.addEventListener('keydown', (e) => {
    console.log("Tecla pressionada:", e.code); 
    
    if (e.code === 'Space' || e.keyCode === 32) {
        console.log("Barra de espaço detectada!"); 
        console.log("O valor de 'isGameOver' é:", isGameOver); 
        
        e.preventDefault(); 
        
        if (isGameOver) {
            console.log("Chamando resetGame()...");
            resetGame();
        } else if (!player.isJumping) {
            console.log("Jogador pulou!");
            player.isJumping = true;
            player.velocityY = -18; 
        }
    }
});

// --- Gerenciador de carregamento ---
messageElement.textContent = "Carregando...";
console.log("Iniciando carregamento de imagens...");

let imagesLoaded = 0;
const totalImages = 2;

function onImageLoad(e) {
    let filename = e.target.src.split('/').pop();
    imagesLoaded++;
    console.log(`Imagem carregada: ${filename} (${imagesLoaded}/${totalImages})`); 
    
    // --- TESTE DE DIAGNÓSTICO ---
    if (filename === 'coraline_sprite.png') {
        console.log(`TESTE: 'coraline_sprite.png' carregada. Largura: ${playerSpriteSheet.naturalWidth}px, Altura: ${playerSpriteSheet.naturalHeight}px`);
        if (playerSpriteSheet.naturalWidth === 0) {
            console.error("ERRO GRAVE: A imagem 'coraline_sprite.png' carregou mas tem LARGURA 0. O arquivo está corrompido ou é inválido.");
        }
    }
    // -------------------------
    
    if (imagesLoaded === totalImages) {
        console.log("Todas as imagens carregadas. Pronto para iniciar!"); 
        messageElement.textContent = "Pressione Espaço para Iniciar";
    }
}

function onImageError(e) {
    let filename = e.target.src.split('/').pop();
    console.error(`ERRO: A imagem '${filename}' não foi encontrada.`);
    messageElement.textContent = `ERRO: '${filename}' não encontrada. Verifique o nome!`;
}

// 1. Configura os handlers de evento
playerSpriteSheet.onload = onImageLoad;
backgroundImage.onload = onImageLoad;
playerSpriteSheet.onerror = onImageError;
backgroundImage.onerror = onImageError;

// 2. Define o .src para disparar o carregamento

backgroundImage.src = 'https://uploads.onecompiler.io/43s2gp4fr/43znayj4u/ceu.png'; // <-- Verifique se o nome está correto
playerSpriteSheet.src = 'https://uploads.onecompiler.io/43s2gp4fr/43znayj4u/coraline_sprite.png'; // <-- Nome do arquivo do link
